{
 "cells": [
  {
   "kind": 2,
   "value": "Remove[\"Global`*\"]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "f = epsi*M^3/r;\r\nA1 = 1 + a13*(M/r)^3;\r\nA2 = 2 + a22*(M/r)^2;\r\nA5 = 1 + a52*(M/r)^2;\r\n\r\nB = (r^2 + a^2)*A1 - a^2*A2*Sin[theta]^2;\r\nSigma = r^2 + a^2*Cos[theta]^2;\r\nSigmavar = Sigma + f;\r\nDelta = r^2 - 2*M*r + a^2;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "epsi = 0;\r\na13 = 0;\r\na22 = 0;\r\na52 = 0;\r\nb1 = 0;\r\nb2 = 0;\r\nc1 = 0;\r\nc2 = 0;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "b1 = defpar;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "## Covariant Metric Components",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "gtt = Sigmavar*(Delta - a^2*A2^2*Sin[theta]^2)/B^2;\r\ngrr = Sigmavar/(Delta*A5);\r\ngthth = Sigmavar;\r\ngpp = ((r^2 + a^2)^2*A1^2 - a^2*Delta*Sin[theta]^2)*Sigmavar*\r\n   Sin[theta]^2/B^2;\r\ngtp = -a*((r^2 + a^2)*A1*A2 - Delta)*Sigmavar*Sin[theta]^2/B^2;\r\ngtr = b1*a/r + b2*a*M/r^2;\r\ngrp = c1*a*Sin[theta]^2/r + c2*a*M*Sin[theta]^2/r^2;\r\n\r\nG = Simplify[{{gtt, gtr, 0, gtp}, {gtr, grr, 0, grp}, {0, 0, gthth, \r\n     0}, {gtp, grp, 0, gpp}}];\r\nG // MatrixForm",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "## Contravariant Metric Components",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "Ginv = Simplify[Inverse[G]];\r\n(* Ginv // MatrixForm *)",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "gutt = Ginv[[1]][[1]];\r\ngurr = Ginv[[2]][[2]];\r\nguthth = Ginv[[3]][[3]];\r\ngupp = Ginv[[4]][[4]];\r\ngutr = Ginv[[1]][[2]];\r\ngutp = Ginv[[1]][[4]];\r\ngurp = Ginv[[2]][[4]];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "## Christoffel Symbol",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "Christ = ResourceFunction[\"ChristoffelSymbol\"][G, {t, r, theta, phi}, \"Kind\" -> \"Second\"];\r\nChrist = Simplify[Christ];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* chttt = Simplify[Part[Christ, 1, 1, 1]];\r\nchttr = Simplify[Part[Christ, 1, 1, 2]];\r\nchttth = Simplify[Part[Christ, 1, 1, 3]];\r\nchttp = Simplify[Part[Christ, 1, 1, 4]];\r\nchtrr = Simplify[Part[Christ, 1, 2, 2]];\r\nchtrth = Simplify[Part[Christ, 1, 2, 3]];\r\nchtrp = Simplify[Part[Christ, 1, 2, 4]];\r\nchtthth = Simplify[Part[Christ, 1, 3, 3]];\r\nchtthp = Simplify[Part[Christ, 1, 3, 4]];\r\nchtpp = Simplify[Part[Christ, 1, 4, 4]];\r\n\r\nchrtt = Simplify[Part[Christ, 2, 1, 1]];\r\nchrtr = Simplify[Part[Christ, 2, 1, 2]];\r\nchrtth = Simplify[Part[Christ, 2, 1, 3]];\r\nchrtp = Simplify[Part[Christ, 2, 1, 4]];\r\nchrrr = Simplify[Part[Christ, 2, 2, 2]];\r\nchrrth = Simplify[Part[Christ, 2, 2, 3]];\r\nchrrp = Simplify[Part[Christ, 2, 2, 4]];\r\nchrthth = Simplify[Part[Christ, 2, 3, 3]];\r\nchrthp = Simplify[Part[Christ, 2, 3, 4]];\r\nchrpp = Simplify[Part[Christ, 2, 4, 4]];\r\n\r\nchthtt = Simplify[Part[Christ, 3, 1, 1]];\r\nchthtr = Simplify[Part[Christ, 3, 1, 2]];\r\nchthtth = Simplify[Part[Christ, 3, 1, 3]];\r\nchthtp = Simplify[Part[Christ, 3, 1, 4]];\r\nchthrr = Simplify[Part[Christ, 3, 2, 2]];\r\nchthrth = Simplify[Part[Christ, 3, 2, 3]];\r\nchthrp = Simplify[Part[Christ, 3, 2, 4]];\r\nchththth = Simplify[Part[Christ, 3, 3, 3]];\r\nchththp = Simplify[Part[Christ, 3, 3, 4]];\r\nchthpp = Simplify[Part[Christ, 3, 4, 4]];\r\n\r\nchptt = Simplify[Part[Christ, 4, 1, 1]];\r\nchptr = Simplify[Part[Christ, 4, 1, 2]];\r\nchptth = Simplify[Part[Christ, 4, 1, 3]];\r\nchptp = Simplify[Part[Christ, 4, 1, 4]];\r\nchprr = Simplify[Part[Christ, 4, 2, 2]];\r\nchprth = Simplify[Part[Christ, 4, 2, 3]];\r\nchprp = Simplify[Part[Christ, 4, 2, 4]];\r\nchpthth = Simplify[Part[Christ, 4, 3, 3]];\r\nchpthp = Simplify[Part[Christ, 4, 3, 4]];\r\nchppp = Simplify[Part[Christ, 4, 4, 4]]; *)",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "## Metric Derivatives",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "dGdr = Simplify[D[G, r]];\r\ndGdth = Simplify[D[G, theta]];\r\ndGdr2 = Simplify[D[G, {r, 2}]];\r\ndGdth2 = Simplify[D[G, {theta, 2}]];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* dgttdr = Simplify[D[gtt, r]];\r\ndgrrdr = Simplify[D[grr, r]];\r\ndgththdr = Simplify[D[gthth, r]];\r\ndgppdr = Simplify[D[gpp, r]];\r\ndgtpdr = Simplify[D[gtp, r]];\r\ndgtrdr = Simplify[D[gtr, r]];\r\ndgrpdr = Simplify[D[grp, r]];\r\n\r\ndgttdth = Simplify[D[gtt, theta]];\r\ndgrrdth = Simplify[D[grr, theta]];\r\ndgththdth = Simplify[D[gthth, theta]];\r\ndgppdth = Simplify[D[gpp, theta]];\r\ndgtpdth = Simplify[D[gtp, theta]];\r\ndgtrdth = Simplify[D[gtr, theta]];\r\ndgrpdth = Simplify[D[grp, theta]];\r\n\r\ndgttdr2 = Simplify[D[dgttdr, r]];\r\ndgrrdr2 = Simplify[D[dgrrdr, r]];\r\ndgththdr2 = Simplify[D[dgththdr, r]];\r\ndgppdr2 = Simplify[D[dgppdr, r]];\r\ndgtpdr2 = Simplify[D[dgtpdr, r]];\r\ndgtrdr2 = Simplify[D[dgtrdr, r]];\r\ndgrpdr2 = Simplify[D[dgrpdr, r]];\r\n\r\ndgttdth2 = Simplify[D[dgttdth, theta]];\r\ndgrrdth2 = Simplify[D[dgrrdth, theta]];\r\ndgththdth2 = Simplify[D[dgththdth, theta]];\r\ndgppdth2 = Simplify[D[dgppdth, theta]];\r\ndgtpdth2 = Simplify[D[dgtpdth, theta]];\r\ndgtrdth2 = Simplify[D[dgtrdth, theta]];\r\ndgrpdth2 = Simplify[D[dgrpdth, theta]]; *)",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "## Redshift",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "omega = Simplify[(-dGdr[[1]][[4]] + Sqrt[dGdr[[1]][[4]]*dGdr[[1]][[4]] - dGdr[[1]][[1]]*dGdr[[4]][[4]]])/dGdr[[4]][[4]]];\r\nuet = Simplify[1/Sqrt[-(G[[1]][[1]] + 2*G[[1]][[4]]*omega + G[[4]][[4]]*omega*omega)]];\r\ng = Simplify[1/(uet*(1 - omega*ktkp))];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "se = -(G[[1]][[1]] + G[[1]][[4]]*omega)*uet /. theta -> Pi/2;\r\nse = Simplify[se]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "## Convert to C Code",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* ::Package:: *)\r\n\r\nBeginPackage[ \"OptimizeExpressionToC`\"]\r\n\r\nOptimizeExpressionToC::usage = \"Generates optimized version of expression in C\";\r\n\r\nExtractTags::usage = \"\";\r\nClearTagText::usage = \"\";\r\nTagExistQ::usage = \"\";\r\nAppendToTag::usage = \"\";\r\n\r\nBegin[ \"Private`\"]\r\n\r\nOptimizeExpressionToC[expr_List] :=\r\n\tModule[ {optimizedExpr, mainExpr, n, m, defs, output},\r\n\t\toptimizedExpr = Experimental`OptimizeExpression[expr];\r\n\t\tIf[ ToString@optimizedExpr[[1, 0]] == \"Block\",\r\n\t\t    {n = Length[optimizedExpr[[1, 1]]];\r\n\t\t     mainExpr = optimizedExpr[[1, 2, n + 1]];},\r\n\t\t    {n = 0;\r\n\t\t     mainExpr = Flatten@{optimizedExpr[[1]]};}\r\n\t\t];\r\n\t\tm = Length[mainExpr];\r\n\t\t\r\n\t\tdefs  = \r\n\t\tTable[ \"double \" <>\r\n\t\t\t       ToString@CForm@optimizedExpr[[1, 2, i, 1]]  <>\r\n\t\t\t       \" = \" <>\r\n\t\t\t       ToString@CForm@optimizedExpr[[1, 2, i, 2]] <>\r\n     \t\t\t       \";\",\r\n    \t\t       {i, 1, n}];\r\n\t\t\r\n\t\toutput = \r\n\r\n\t\t       MapIndexed[ \"out(\"<>StringJoin@Riffle[ToString/@(#2-1),\"\"]<>\") = \" <> ToString@CForm@#1 <>\";\" &,\r\n\t\t\t\t\t mainExpr, {ArrayDepth[mainExpr]}];\r\n\t\t\r\n\t\tStringReplace[Join[defs,output], \"Compile_$\" -> \"t\"]\r\n\t];\r\n\r\nEnd[]\r\n\r\n\r\nExtractTags[string_String] :=\r\n\tModule[ {regex, extractTag},\r\n\t\tregex = RegularExpression[\"\\\\n([^\\\\n]*)// (\\\\[|</?)([^\\\\]\\\\n]*)(\\\\]|>)[^\\\\n]*\\\\n\"];\r\n\t\t\r\n\t\textractTag[bounds_] := Module[{substring, indentation, tagType, tag},\r\n\t\t\t\t\t      substring = StringTake[string, bounds];\r\n\t\t\t\t\t      {{indentation, tagType, tag}} = \r\n\t\t\t\t\t      StringCases[substring, regex -> {\"$1\", \"$2\", \"$3\"}];\r\n\t\t\t\t\t      Association[\"indentation\" -> indentation,\r\n\t\t\t\t\t\t\t  \"tagType\" -> tagType, \r\n\t\t\t\t\t\t\t  \"tag\" -> tag , \"start\" -> bounds[[1]] + 1, \r\n\t\t\t\t\t\t\t  \"end\" -> bounds[[2]]]\r\n\t\t\t\t       ];\r\n\t\t\r\n\t\textractTag[#] & /@ StringPosition[string, regex]\r\n\t];\r\n\r\nTagExistQ[string_String, tag_String] := AnyTrue[ExtractTags[string], #[[\"tag\"]]==tag &];\r\n\r\nClearTagText[string_String, tag_String] :=\r\n\tModule[{tags, startTag, endTag, x},\r\n\t       tags = ExtractTags[string];\r\n\t       startTag = FirstCase[tags, x_ /; x[[\"tag\"]] == tag  && x[[\"tagType\"]] == \"<\"];\r\n\t       endTag = FirstCase[tags, x_ /; x[[\"tag\"]] == tag  && x[[\"tagType\"]] == \"</\"];\r\n\t       \r\n\t       StringTake[string, {1, startTag[[\"end\"]]}] <> \r\n\t\t\t StringTake[string, {endTag[[\"start\"]], StringLength[string]}]\r\n\t]\r\n\r\nAppendToTag[string_String,  tag_String, linesToAppend_List] := \r\n\tModule[{tags, startTag, indent, x},\r\n\t       tags = ExtractTags[string];\r\n\t       startTag = FirstCase[tags, x_ /; x[[\"tag\"]] == tag  && x[[\"tagType\"]] == \"<\"];\r\n\t       indent = startTag[[\"indentation\"]];\r\n\t       \r\n\t       StringTake[string, {1, startTag[[\"end\"]]}] <> \r\n\t\t\t StringRiffle[ linesToAppend, {indent, \"\\n\" <> indent, \"\\n\"}] <>\r\n\t\t\t StringTake[ string, {startTag[[\"end\"]] + 1, StringLength[string]}]\r\n\t];\r\n\r\nAppendToTag[string_String,  tag_String, stringToAppend_String] :=\r\n\tAppendToTag[string, tag, StringSplit[stringToAppend,\"\\n\"]];\r\n\r\n\r\nEndPackage[]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "M = 1;\r\na = spin;\r\ntheta = th;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "### Metric Components",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   G[[1]][[1]], G[[1]][[2]], G[[1]][[3]], G[[1]][[4]], \r\n   G[[2]][[1]], G[[2]][[2]], G[[2]][[3]], G[[2]][[4]],\r\n   G[[3]][[1]], G[[3]][[2]], G[[3]][[3]], G[[3]][[4]],\r\n   G[[4]][[1]], G[[4]][[2]], G[[4]][[3]], G[[4]][[4]]\r\n   }];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"double\" -> \"long double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"g[0][0]\", \"out(1)\" -> \"g[0][1]\", \"out(2)\" -> \"g[0][2]\", \"out(3)\" -> \"g[0][3]\",\r\n   \"out(4)\" -> \"g[1][0]\", \"out(5)\" -> \"g[1][1]\", \"out(6)\" -> \"g[1][2]\", \"out(7)\" -> \"g[1][3]\",\r\n   \"out(8)\" -> \"g[2][0]\", \"out(9)\" -> \"g[2][1]\", \"out(10)\" -> \"g[2][2]\", \"out(11)\" -> \"g[2][3]\",\r\n   \"out(12)\" -> \"g[3][0]\", \"out(13)\" -> \"g[3][1]\", \"out(14)\" -> \"g[3][2]\", \"out(15)\" -> \"g[3][3]\"\r\n   }]]];\r\nheader = \"void metric(long double r, long double th, long double g[4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nmetric = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "### Metric r derivatives",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   dGdr[[1]][[1]], dGdr[[1]][[2]], dGdr[[1]][[3]], dGdr[[1]][[4]], \r\n   dGdr[[2]][[1]], dGdr[[2]][[2]], dGdr[[2]][[3]], dGdr[[2]][[4]],\r\n   dGdr[[3]][[1]], dGdr[[3]][[2]], dGdr[[3]][[3]], dGdr[[3]][[4]],\r\n   dGdr[[4]][[1]], dGdr[[4]][[2]], dGdr[[4]][[3]], dGdr[[4]][[4]]\r\n   }];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"double\" -> \"long double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"dg[0][0]\", \"out(1)\" -> \"dg[0][1]\", \"out(2)\" -> \"dg[0][2]\", \"out(3)\" -> \"dg[0][3]\",\r\n   \"out(4)\" -> \"dg[1][0]\", \"out(5)\" -> \"dg[1][1]\", \"out(6)\" -> \"dg[1][2]\", \"out(7)\" -> \"dg[1][3]\",\r\n   \"out(8)\" -> \"dg[2][0]\", \"out(9)\" -> \"dg[2][1]\", \"out(10)\" -> \"dg[2][2]\", \"out(11)\" -> \"dg[2][3]\",\r\n   \"out(12)\" -> \"dg[3][0]\", \"out(13)\" -> \"dg[3][1]\", \"out(14)\" -> \"dg[3][2]\", \"out(15)\" -> \"dg[3][3]\"\r\n   }]]];\r\nheader = \"void metric_rderivatives(long double r, long double th, long double dg[4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nmetricdr = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "### Metric r2 derivatives",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   dGdr2[[1]][[1]], dGdr2[[1]][[2]], dGdr2[[1]][[3]], dGdr2[[1]][[4]], \r\n   dGdr2[[2]][[1]], dGdr2[[2]][[2]], dGdr2[[2]][[3]], dGdr2[[2]][[4]],\r\n   dGdr2[[3]][[1]], dGdr2[[3]][[2]], dGdr2[[3]][[3]], dGdr2[[3]][[4]],\r\n   dGdr2[[4]][[1]], dGdr2[[4]][[2]], dGdr2[[4]][[3]], dGdr2[[4]][[4]]\r\n   }];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"double\" -> \"long double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"dg2[0][0]\", \"out(1)\" -> \"dg2[0][1]\", \"out(2)\" -> \"dg2[0][2]\", \"out(3)\" -> \"dg2[0][3]\",\r\n   \"out(4)\" -> \"dg2[1][0]\", \"out(5)\" -> \"dg2[1][1]\", \"out(6)\" -> \"dg2[1][2]\", \"out(7)\" -> \"dg2[1][3]\",\r\n   \"out(8)\" -> \"dg2[2][0]\", \"out(9)\" -> \"dg2[2][1]\", \"out(10)\" -> \"dg2[2][2]\", \"out(11)\" -> \"dg2[2][3]\",\r\n   \"out(12)\" -> \"dg2[3][0]\", \"out(13)\" -> \"dg2[3][1]\", \"out(14)\" -> \"dg2[3][2]\", \"out(15)\" -> \"dg2[3][3]\"\r\n   }]]];\r\nheader = \"void metric_r2derivatives(long double r, long double th, long double dg2[4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nmetricdr2 = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "### Covariant Metric Components",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   Ginv[[1]][[1]], Ginv[[1]][[2]], Ginv[[1]][[3]], Ginv[[1]][[4]], \r\n   Ginv[[2]][[1]], Ginv[[2]][[2]], Ginv[[2]][[3]], Ginv[[2]][[4]],\r\n   Ginv[[3]][[1]], Ginv[[3]][[2]], Ginv[[3]][[3]], Ginv[[3]][[4]],\r\n   Ginv[[4]][[1]], Ginv[[4]][[2]], Ginv[[4]][[3]], Ginv[[4]][[4]]\r\n   }];\r\nmeet = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"double\" -> \"long double\", \";,\" -> \";\\n   \",\r\n   \"out(0)\" -> \"gu[0][0]\", \"out(1)\" -> \"gu[0][1]\", \"out(2)\" -> \"gu[0][2]\", \"out(3)\" -> \"gu[0][3]\",\r\n   \"out(4)\" -> \"gu[1][0]\", \"out(5)\" -> \"gu[1][1]\", \"out(6)\" -> \"gu[1][2]\", \"out(7)\" -> \"gu[1][3]\",\r\n   \"out(8)\" -> \"gu[2][0]\", \"out(9)\" -> \"gu[2][1]\", \"out(10)\" -> \"gu[2][2]\", \"out(11)\" -> \"gu[2][3]\",\r\n   \"out(12)\" -> \"gu[3][0]\", \"out(13)\" -> \"gu[3][1]\", \"out(14)\" -> \"gu[3][2]\", \"out(15)\" -> \"gu[3][3]\"\r\n   }]]];\r\nheader = \"void uppermetric(long double r, long double th, long double gu[4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nmetricupper = header <> meet <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "output = metric <> \"\\n\\n\" <> metricupper <> \"\\n\\n\" <> metricdr <> \"\\n\\n\" <> metricdr2;\r\n\r\n(* write to metric.cpp file *)\r\nSetDirectory[\"C:\\\\Users\\\\Administrator\\\\Documents\\\\script\\\\raytransfer\"];\r\nExport[\"metric.cpp\", output, \"Text\"]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "### Christoffel Symbols",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   Christ[[1]][[1]][[1]], Christ[[1]][[1]][[2]], Christ[[1]][[1]][[3]], Christ[[1]][[1]][[4]],\r\n   Christ[[1]][[2]][[2]], Christ[[1]][[2]][[3]], Christ[[1]][[2]][[4]],\r\n   Christ[[1]][[3]][[3]], Christ[[1]][[3]][[4]],\r\n   Christ[[1]][[4]][[4]],\r\n   Christ[[2]][[1]][[1]], Christ[[2]][[1]][[2]], Christ[[2]][[1]][[3]], Christ[[2]][[1]][[4]],\r\n   Christ[[2]][[2]][[2]], Christ[[2]][[2]][[3]], Christ[[2]][[2]][[4]],\r\n   Christ[[2]][[3]][[3]], Christ[[2]][[3]][[4]],\r\n   Christ[[2]][[4]][[4]],\r\n   Christ[[3]][[1]][[1]], Christ[[3]][[1]][[2]], Christ[[3]][[1]][[3]], Christ[[3]][[1]][[4]],\r\n   Christ[[3]][[2]][[2]], Christ[[3]][[2]][[3]], Christ[[3]][[2]][[4]],\r\n   Christ[[3]][[3]][[3]], Christ[[3]][[3]][[4]],\r\n   Christ[[3]][[4]][[4]],\r\n   Christ[[4]][[1]][[1]], Christ[[4]][[1]][[2]], Christ[[4]][[1]][[3]], Christ[[4]][[1]][[4]],\r\n   Christ[[4]][[2]][[2]], Christ[[4]][[2]][[3]], Christ[[4]][[2]][[4]],\r\n   Christ[[4]][[3]][[3]], Christ[[4]][[3]][[4]],\r\n   Christ[[4]][[4]][[4]]\r\n   }];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"double\" -> \"long double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"christ[0][0][0]\", \"out(1)\" -> \"christ[0][0][1]\", \"out(2)\" -> \"christ[0][0][2]\", \"out(3)\" -> \"christ[0][0][3]\",\r\n   \"out(4)\" -> \"christ[0][1][1]\", \"out(5)\" -> \"christ[0][1][2]\", \"out(6)\" -> \"christ[0][1][3]\", \r\n   \"out(7)\" -> \"christ[0][2][2]\", \"out(8)\" -> \"christ[0][2][3]\", \r\n   \"out(9)\" -> \"christ[0][3][3]\",\r\n   \"out(10)\" -> \"christ[1][0][0]\", \"out(11)\" -> \"christ[1][0][1]\", \"out(12)\" -> \"christ[1][0][2]\", \"out(13)\" -> \"christ[1][0][3]\",\r\n   \"out(14)\" -> \"christ[1][1][1]\", \"out(15)\" -> \"christ[1][1][2]\", \"out(16)\" -> \"christ[1][1][3]\",\r\n   \"out(17)\" -> \"christ[1][2][2]\", \"out(18)\" -> \"christ[1][2][3]\",\r\n   \"out(19)\" -> \"christ[1][3][3]\",\r\n   \"out(20)\" -> \"christ[2][0][0]\", \"out(21)\" -> \"christ[2][0][1]\", \"out(22)\" -> \"christ[2][0][2]\", \"out(23)\" -> \"christ[2][0][3]\",\r\n   \"out(24)\" -> \"christ[2][1][1]\", \"out(25)\" -> \"christ[2][1][2]\", \"out(26)\" -> \"christ[2][1][3]\",\r\n   \"out(27)\" -> \"christ[2][2][2]\", \"out(28)\" -> \"christ[2][2][3]\",\r\n   \"out(29)\" -> \"christ[2][3][3]\",\r\n   \"out(30)\" -> \"christ[3][0][0]\", \"out(31)\" -> \"christ[3][0][1]\", \"out(32)\" -> \"christ[3][0][2]\", \"out(33)\" -> \"christ[3][0][3]\",\r\n   \"out(34)\" -> \"christ[3][1][1]\", \"out(35)\" -> \"christ[3][1][2]\", \"out(36)\" -> \"christ[3][1][3]\",\r\n   \"out(37)\" -> \"christ[3][2][2]\", \"out(38)\" -> \"christ[3][2][3]\",\r\n   \"out(39)\" -> \"christ[3][3][3]\"}]]];\r\nheader = \"void christoffel(long double r, long double th, long double christ[4][4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nchristoffel = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "output = christoffel;\r\n\r\n(* write to christoffel file *)\r\nExport[\"christoffel.cpp\", output, \"Text\"];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "### Redshift",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{g}];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"double\" -> \"long double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"gg\",\r\n   \"Csc\" -> \"1/sin\"}]]];\r\nheader = \"void redshift(long double r, long double th, long double ktkp, long double &gg)\\n{\\n\";\r\nfooter = \"\\n}\";\r\nred = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{se}];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"double\" -> \"long double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"long double se\",\r\n   \"Csc\" -> \"1/sin\"}]]];\r\nheader = \"long double specific_energy(long double r)\\n{\\n\";\r\nfooter = \"\\nreturn se;\\n}\";\r\nspecific = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "output = red <> \"\\n\\n\" <> specific;\r\n\r\n(* write to metric.cpp file *)\r\nSetDirectory[\"C:\\\\Users\\\\Administrator\\\\Documents\\\\script\\\\raytransfer\"];\r\nExport[\"redshift.cpp\", output, \"Text\"]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  }
 ]
}