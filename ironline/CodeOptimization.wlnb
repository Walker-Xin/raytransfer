{
 "cells": [
  {
   "kind": 2,
   "value": "Remove[\"Global`*\"]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "## Covariant Metric Components",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "f = epsi*M*M*M/r;\r\nA1 = 1 + a13*(M/r)*(M/r)*(M/r);\r\nA2 = 1 + a22*(M/r)*(M/r);\r\nA5 = 1 + a52*(M/r)*(M/r);\r\n\r\nB = (r*r + a*a)*A1 - a*a*A2*Sin[theta]*Sin[theta];\r\nSigma = r*r + a*a*Cos[theta]*Cos[theta];\r\nSigmavar = Sigma + f;\r\nDelta = r*r - 2*M*r + a*a;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "epsi = 0;\r\na13 = 0;\r\na22 = 0;\r\na52 = 0;\r\nb1 = 0;\r\nb2 = 0;\r\nc1 = 0;\r\nc2 = 0;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "b1 = defpar;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "gtt = -Sigmavar*(Delta - a*a*A2*A2*Sin[theta]*Sin[theta])/(B*B);\r\ngrr = Sigmavar/(Delta*A5);\r\ngthth = Sigmavar;\r\ngpp = ((r*r + a*a)*(r*r + a*a)*A1*A1 - a*a*Delta*Sin[theta]*Sin[theta])*Sigmavar*Sin[theta]^2/(B*B);\r\ngtp = -a*((r^2 + a^2)*A1*A2 - Delta)*Sigmavar*Sin[theta]^2/B^2;\r\n(* gtr = b1*a/r + b2*a*M/r^2; *)\r\ngtr = b1*a/(2*r) + b2*a*M/r^2;\r\ngrp = c1*a*Sin[theta]^2/r + c2*a*M*Sin[theta]^2/r^2;\r\n\r\nG = Simplify[{{gtt, gtr, 0, gtp}, {gtr, grr, 0, grp}, {0, 0, gthth, \r\n     0}, {gtp, grp, 0, gpp}}];\r\nG // MatrixForm",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* test G numerically *)\r\nnum = {r -> 1.0, theta -> 0.2, M -> 1, a -> 0.5};\r\nEvaluate[grr /. num] // MatrixForm",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "## Metric Derivatives",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "dGdr = Simplify[D[G, r]];\r\ndGdth = Simplify[D[G, theta]];\r\ndGdr2 = Simplify[D[dGdr, r]];\r\ndGdth2 = Simplify[D[dGdr, theta]];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "## Contravariant Metric Components",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "Ginv = Simplify[Inverse[G]];\r\n(* Ginv // MatrixForm *)",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "gutt = Ginv[[1]][[1]];\r\ngurr = Ginv[[2]][[2]];\r\nguthth = Ginv[[3]][[3]];\r\ngupp = Ginv[[4]][[4]];\r\ngutr = Ginv[[1]][[2]];\r\ngutp = Ginv[[1]][[4]];\r\ngurp = Ginv[[2]][[4]];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "## Christoffel Symbol",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "Christ = ResourceFunction[\"ChristoffelSymbol\"][G, {t, r, theta, phi}, \"Kind\" -> \"Second\"];\r\nChrist = Simplify[Christ];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* test Christ numerically *)\r\nnum = {r -> 1.0, theta -> 0.15, M -> 1, a -> 0.5, defpar -> 0};\r\nEvaluate[Part[Christ, 1, 1, 2] /. num] // MatrixForm",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "## Redshift",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "omega = (-dGdr[[1]][[4]] + Sqrt[dGdr[[1]][[4]]*dGdr[[1]][[4]] - dGdr[[1]][[1]]*dGdr[[4]][[4]]])/dGdr[[4]][[4]];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "uet = 1/Sqrt[-(G[[1]][[1]] + 2*G[[1]][[4]]*omega + G[[4]][[4]]*omega*omega)];",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "g = 1/(uet*(1 - omega*ktkp))",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "se = -(G[[1]][[1]] + G[[1]][[4]]*omega)*uet /. theta -> Pi/2;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "Lzsub = -(G[[1]][[4]] + G[[4]][[4]]*omega)*uet /. theta -> Pi/2;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "## ISCO",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "equE = (gttS*dt + gtrS*dr + gtpS*dp == -E);\r\nequL = (gtpS*dt + grpS*dr + gppS*dp == Lz);\r\nequU = (gttS*dt^2 + grrS*dr^2 + gppS*dp^2 + 2*gtrS*dt*dr + 2*grpS*dr*dp + 2*gtpS*dt*dp == -1);\r\n\r\nequEalt = (gttS*dt + gtpS*dp == -E);\r\nequLalt = (gtpS*dt + gppS*dp == Lz);\r\nequUalt = (gttS*dt^2 + grrS*dr^2 + gppS*dp^2 + 2*gtpS*dt*dp == -1);\r\n\r\nset = {equE, equL, equU};\r\nset = {equEalt, equLalt, equUalt};",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "sol = Simplify[Solve[set, {dt, dp, dr}]]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "Veff = grrS*dr*dr /. sol[[1]];\r\nVeff = Simplify[Veff]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "subs = {\r\n    gttS -> gtt,\r\n    grrS -> grr,\r\n    gththS -> gthth,\r\n    gppS -> gpp,\r\n    gtrS -> gtr,\r\n    gtpS -> gtp,\r\n    grpS -> grp,\r\n    theta -> Pi/2\r\n};",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "Veffsub = Simplify[(Veff/.subs)/. theta -> Pi/2]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "d2Veffsub = Simplify[D[Veffsub, {r, 2}]]",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "## Convert to C Code",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* ::Package:: *)\r\n\r\nBeginPackage[ \"OptimizeExpressionToC`\"]\r\n\r\nOptimizeExpressionToC::usage = \"Generates optimized version of expression in C\";\r\n\r\nExtractTags::usage = \"\";\r\nClearTagText::usage = \"\";\r\nTagExistQ::usage = \"\";\r\nAppendToTag::usage = \"\";\r\n\r\nBegin[ \"Private`\"]\r\n\r\nOptimizeExpressionToC[expr_List] :=\r\n\tModule[ {optimizedExpr, mainExpr, n, m, defs, output},\r\n\t\toptimizedExpr = Experimental`OptimizeExpression[expr];\r\n\t\tIf[ ToString@optimizedExpr[[1, 0]] == \"Block\",\r\n\t\t    {n = Length[optimizedExpr[[1, 1]]];\r\n\t\t     mainExpr = optimizedExpr[[1, 2, n + 1]];},\r\n\t\t    {n = 0;\r\n\t\t     mainExpr = Flatten@{optimizedExpr[[1]]};}\r\n\t\t];\r\n\t\tm = Length[mainExpr];\r\n\t\t\r\n\t\tdefs  = \r\n\t\tTable[ \"double \" <>\r\n\t\t\t       ToString@CForm@optimizedExpr[[1, 2, i, 1]]  <>\r\n\t\t\t       \" = \" <>\r\n\t\t\t       ToString@CForm@optimizedExpr[[1, 2, i, 2]] <>\r\n     \t\t\t       \";\",\r\n    \t\t       {i, 1, n}];\r\n\t\t\r\n\t\toutput = \r\n\r\n\t\t       MapIndexed[ \"out(\"<>StringJoin@Riffle[ToString/@(#2-1),\"\"]<>\") = \" <> ToString@CForm@#1 <>\";\" &,\r\n\t\t\t\t\t mainExpr, {ArrayDepth[mainExpr]}];\r\n\t\t\r\n\t\tStringReplace[Join[defs,output], \"Compile_$\" -> \"t\"]\r\n\t];\r\n\r\nEnd[]\r\n\r\n\r\nExtractTags[string_String] :=\r\n\tModule[ {regex, extractTag},\r\n\t\tregex = RegularExpression[\"\\\\n([^\\\\n]*)// (\\\\[|</?)([^\\\\]\\\\n]*)(\\\\]|>)[^\\\\n]*\\\\n\"];\r\n\t\t\r\n\t\textractTag[bounds_] := Module[{substring, indentation, tagType, tag},\r\n\t\t\t\t\t      substring = StringTake[string, bounds];\r\n\t\t\t\t\t      {{indentation, tagType, tag}} = \r\n\t\t\t\t\t      StringCases[substring, regex -> {\"$1\", \"$2\", \"$3\"}];\r\n\t\t\t\t\t      Association[\"indentation\" -> indentation,\r\n\t\t\t\t\t\t\t  \"tagType\" -> tagType, \r\n\t\t\t\t\t\t\t  \"tag\" -> tag , \"start\" -> bounds[[1]] + 1, \r\n\t\t\t\t\t\t\t  \"end\" -> bounds[[2]]]\r\n\t\t\t\t       ];\r\n\t\t\r\n\t\textractTag[#] & /@ StringPosition[string, regex]\r\n\t];\r\n\r\nTagExistQ[string_String, tag_String] := AnyTrue[ExtractTags[string], #[[\"tag\"]]==tag &];\r\n\r\nClearTagText[string_String, tag_String] :=\r\n\tModule[{tags, startTag, endTag, x},\r\n\t       tags = ExtractTags[string];\r\n\t       startTag = FirstCase[tags, x_ /; x[[\"tag\"]] == tag  && x[[\"tagType\"]] == \"<\"];\r\n\t       endTag = FirstCase[tags, x_ /; x[[\"tag\"]] == tag  && x[[\"tagType\"]] == \"</\"];\r\n\t       \r\n\t       StringTake[string, {1, startTag[[\"end\"]]}] <> \r\n\t\t\t StringTake[string, {endTag[[\"start\"]], StringLength[string]}]\r\n\t]\r\n\r\nAppendToTag[string_String,  tag_String, linesToAppend_List] := \r\n\tModule[{tags, startTag, indent, x},\r\n\t       tags = ExtractTags[string];\r\n\t       startTag = FirstCase[tags, x_ /; x[[\"tag\"]] == tag  && x[[\"tagType\"]] == \"<\"];\r\n\t       indent = startTag[[\"indentation\"]];\r\n\t       \r\n\t       StringTake[string, {1, startTag[[\"end\"]]}] <> \r\n\t\t\t StringRiffle[ linesToAppend, {indent, \"\\n\" <> indent, \"\\n\"}] <>\r\n\t\t\t StringTake[ string, {startTag[[\"end\"]] + 1, StringLength[string]}]\r\n\t];\r\n\r\nAppendToTag[string_String,  tag_String, stringToAppend_String] :=\r\n\tAppendToTag[string, tag, StringSplit[stringToAppend,\"\\n\"]];\r\n\r\n\r\nEndPackage[]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "M = 1;\r\na = spin;\r\ntheta = th;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "### Metric Components",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   G[[1]][[1]], G[[1]][[2]], G[[1]][[3]], G[[1]][[4]], \r\n   G[[2]][[1]], G[[2]][[2]], G[[2]][[3]], G[[2]][[4]],\r\n   G[[3]][[1]], G[[3]][[2]], G[[3]][[3]], G[[3]][[4]],\r\n   G[[4]][[1]], G[[4]][[2]], G[[4]][[3]], G[[4]][[4]]\r\n   }];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"g[0][0]\", \"out(1)\" -> \"g[0][1]\", \"out(2)\" -> \"g[0][2]\", \"out(3)\" -> \"g[0][3]\",\r\n   \"out(4)\" -> \"g[1][0]\", \"out(5)\" -> \"g[1][1]\", \"out(6)\" -> \"g[1][2]\", \"out(7)\" -> \"g[1][3]\",\r\n   \"out(8)\" -> \"g[2][0]\", \"out(9)\" -> \"g[2][1]\", \"out(10)\" -> \"g[2][2]\", \"out(11)\" -> \"g[2][3]\",\r\n   \"out(12)\" -> \"g[3][0]\", \"out(13)\" -> \"g[3][1]\", \"out(14)\" -> \"g[3][2]\", \"out(15)\" -> \"g[3][3]\"\r\n   }]]];\r\nheader = \"void metric(double r, double th, double g[4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nmetric = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "### Metric r derivatives",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   dGdr[[1]][[1]], dGdr[[1]][[2]], dGdr[[1]][[3]], dGdr[[1]][[4]], \r\n   dGdr[[2]][[1]], dGdr[[2]][[2]], dGdr[[2]][[3]], dGdr[[2]][[4]],\r\n   dGdr[[3]][[1]], dGdr[[3]][[2]], dGdr[[3]][[3]], dGdr[[3]][[4]],\r\n   dGdr[[4]][[1]], dGdr[[4]][[2]], dGdr[[4]][[3]], dGdr[[4]][[4]]\r\n   }];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"dg[0][0]\", \"out(1)\" -> \"dg[0][1]\", \"out(2)\" -> \"dg[0][2]\", \"out(3)\" -> \"dg[0][3]\",\r\n   \"out(4)\" -> \"dg[1][0]\", \"out(5)\" -> \"dg[1][1]\", \"out(6)\" -> \"dg[1][2]\", \"out(7)\" -> \"dg[1][3]\",\r\n   \"out(8)\" -> \"dg[2][0]\", \"out(9)\" -> \"dg[2][1]\", \"out(10)\" -> \"dg[2][2]\", \"out(11)\" -> \"dg[2][3]\",\r\n   \"out(12)\" -> \"dg[3][0]\", \"out(13)\" -> \"dg[3][1]\", \"out(14)\" -> \"dg[3][2]\", \"out(15)\" -> \"dg[3][3]\"\r\n   }]]];\r\nheader = \"void metric_rderivatives(double r, double th, double dg[4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nmetricdr = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "### Metric r2 derivatives",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   dGdr2[[1]][[1]], dGdr2[[1]][[2]], dGdr2[[1]][[3]], dGdr2[[1]][[4]], \r\n   dGdr2[[2]][[1]], dGdr2[[2]][[2]], dGdr2[[2]][[3]], dGdr2[[2]][[4]],\r\n   dGdr2[[3]][[1]], dGdr2[[3]][[2]], dGdr2[[3]][[3]], dGdr2[[3]][[4]],\r\n   dGdr2[[4]][[1]], dGdr2[[4]][[2]], dGdr2[[4]][[3]], dGdr2[[4]][[4]]\r\n   }];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"dg2[0][0]\", \"out(1)\" -> \"dg2[0][1]\", \"out(2)\" -> \"dg2[0][2]\", \"out(3)\" -> \"dg2[0][3]\",\r\n   \"out(4)\" -> \"dg2[1][0]\", \"out(5)\" -> \"dg2[1][1]\", \"out(6)\" -> \"dg2[1][2]\", \"out(7)\" -> \"dg2[1][3]\",\r\n   \"out(8)\" -> \"dg2[2][0]\", \"out(9)\" -> \"dg2[2][1]\", \"out(10)\" -> \"dg2[2][2]\", \"out(11)\" -> \"dg2[2][3]\",\r\n   \"out(12)\" -> \"dg2[3][0]\", \"out(13)\" -> \"dg2[3][1]\", \"out(14)\" -> \"dg2[3][2]\", \"out(15)\" -> \"dg2[3][3]\"\r\n   }]]];\r\nheader = \"void metric_r2derivatives(double r, double th, double dg2[4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nmetricdr2 = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "### Covariant Metric Components",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   Ginv[[1]][[1]], Ginv[[1]][[2]], Ginv[[1]][[3]], Ginv[[1]][[4]], \r\n   Ginv[[2]][[1]], Ginv[[2]][[2]], Ginv[[2]][[3]], Ginv[[2]][[4]],\r\n   Ginv[[3]][[1]], Ginv[[3]][[2]], Ginv[[3]][[3]], Ginv[[3]][[4]],\r\n   Ginv[[4]][[1]], Ginv[[4]][[2]], Ginv[[4]][[3]], Ginv[[4]][[4]]\r\n   }];\r\nmeet = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"gu[0][0]\", \"out(1)\" -> \"gu[0][1]\", \"out(2)\" -> \"gu[0][2]\", \"out(3)\" -> \"gu[0][3]\",\r\n   \"out(4)\" -> \"gu[1][0]\", \"out(5)\" -> \"gu[1][1]\", \"out(6)\" -> \"gu[1][2]\", \"out(7)\" -> \"gu[1][3]\",\r\n   \"out(8)\" -> \"gu[2][0]\", \"out(9)\" -> \"gu[2][1]\", \"out(10)\" -> \"gu[2][2]\", \"out(11)\" -> \"gu[2][3]\",\r\n   \"out(12)\" -> \"gu[3][0]\", \"out(13)\" -> \"gu[3][1]\", \"out(14)\" -> \"gu[3][2]\", \"out(15)\" -> \"gu[3][3]\"\r\n   }]]];\r\nheader = \"void uppermetric(double r, double th, double gu[4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nmetricupper = header <> meet <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "output = metric <> \"\\n\\n\" <> metricupper <> \"\\n\\n\" <> metricdr <> \"\\n\\n\" <> metricdr2\r\n\r\n(* write to metric.cpp file *)\r\nSetDirectory[\"C:\\\\Users\\\\WalkerXin\\\\Documents\\\\Scripts\\\\raytransfer\\\\ironline\"];\r\nExport[\"metric.cpp\", output, \"Text\"]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "### Christoffel Symbols",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   Christ[[1]][[1]][[1]], Christ[[1]][[1]][[2]], Christ[[1]][[1]][[3]], Christ[[1]][[1]][[4]],\r\n   Christ[[1]][[2]][[1]], Christ[[1]][[2]][[2]], Christ[[1]][[2]][[3]], Christ[[1]][[2]][[4]],\r\n   Christ[[1]][[3]][[1]], Christ[[1]][[3]][[2]], Christ[[1]][[3]][[3]], Christ[[1]][[3]][[4]],\r\n   Christ[[1]][[4]][[1]], Christ[[1]][[4]][[2]], Christ[[1]][[4]][[3]], Christ[[1]][[4]][[4]],\r\n   Christ[[2]][[1]][[1]], Christ[[2]][[1]][[2]], Christ[[2]][[1]][[3]], Christ[[2]][[1]][[4]],\r\n   Christ[[2]][[2]][[1]], Christ[[2]][[2]][[2]], Christ[[2]][[2]][[3]], Christ[[2]][[2]][[4]],\r\n   Christ[[2]][[3]][[1]], Christ[[2]][[3]][[2]], Christ[[2]][[3]][[3]], Christ[[2]][[3]][[4]],\r\n   Christ[[2]][[4]][[1]], Christ[[2]][[4]][[2]], Christ[[2]][[4]][[3]], Christ[[2]][[4]][[4]],\r\n   Christ[[3]][[1]][[1]], Christ[[3]][[1]][[2]], Christ[[3]][[1]][[3]], Christ[[3]][[1]][[4]],\r\n   Christ[[3]][[2]][[1]], Christ[[3]][[2]][[2]], Christ[[3]][[2]][[3]], Christ[[3]][[2]][[4]],\r\n   Christ[[3]][[3]][[1]], Christ[[3]][[3]][[2]], Christ[[3]][[3]][[3]], Christ[[3]][[3]][[4]],\r\n   Christ[[3]][[4]][[1]], Christ[[3]][[4]][[2]], Christ[[3]][[4]][[3]], Christ[[3]][[4]][[4]],\r\n   Christ[[4]][[1]][[1]], Christ[[4]][[1]][[2]], Christ[[4]][[1]][[3]], Christ[[4]][[1]][[4]],\r\n   Christ[[4]][[2]][[1]], Christ[[4]][[2]][[2]], Christ[[4]][[2]][[3]], Christ[[4]][[2]][[4]],\r\n   Christ[[4]][[3]][[1]], Christ[[4]][[3]][[2]], Christ[[4]][[3]][[3]], Christ[[4]][[3]][[4]],\r\n   Christ[[4]][[4]][[1]], Christ[[4]][[4]][[2]], Christ[[4]][[4]][[3]], Christ[[4]][[4]][[4]]\r\n   }];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"christ[0][0][0]\", \"out(1)\" -> \"christ[0][0][1]\", \"out(2)\" -> \"christ[0][0][2]\", \"out(3)\" -> \"christ[0][0][3]\",\r\n   \"out(4)\" -> \"christ[0][1][0]\", \"out(5)\" -> \"christ[0][1][1]\", \"out(6)\" -> \"christ[0][1][2]\", \"out(7)\" -> \"christ[0][1][3]\",\r\n   \"out(8)\" -> \"christ[0][2][0]\", \"out(9)\" -> \"christ[0][2][1]\", \"out(10)\" -> \"christ[0][2][2]\", \"out(11)\" -> \"christ[0][2][3]\",\r\n   \"out(12)\" -> \"christ[0][3][0]\", \"out(13)\" -> \"christ[0][3][1]\", \"out(14)\" -> \"christ[0][3][2]\", \"out(15)\" -> \"christ[0][3][3]\",\r\n   \"out(16)\" -> \"christ[1][0][0]\", \"out(17)\" -> \"christ[1][0][1]\", \"out(18)\" -> \"christ[1][0][2]\", \"out(19)\" -> \"christ[1][0][3]\",\r\n   \"out(20)\" -> \"christ[1][1][0]\", \"out(21)\" -> \"christ[1][1][1]\", \"out(22)\" -> \"christ[1][1][2]\", \"out(23)\" -> \"christ[1][1][3]\",\r\n   \"out(24)\" -> \"christ[1][2][0]\", \"out(25)\" -> \"christ[1][2][1]\", \"out(26)\" -> \"christ[1][2][2]\", \"out(27)\" -> \"christ[1][2][3]\",\r\n   \"out(28)\" -> \"christ[1][3][0]\", \"out(29)\" -> \"christ[1][3][1]\", \"out(30)\" -> \"christ[1][3][2]\", \"out(31)\" -> \"christ[1][3][3]\",\r\n   \"out(32)\" -> \"christ[2][0][0]\", \"out(33)\" -> \"christ[2][0][1]\", \"out(34)\" -> \"christ[2][0][2]\", \"out(35)\" -> \"christ[2][0][3]\",\r\n   \"out(36)\" -> \"christ[2][1][0]\", \"out(37)\" -> \"christ[2][1][1]\", \"out(38)\" -> \"christ[2][1][2]\", \"out(39)\" -> \"christ[2][1][3]\",\r\n   \"out(40)\" -> \"christ[2][2][0]\", \"out(41)\" -> \"christ[2][2][1]\", \"out(42)\" -> \"christ[2][2][2]\", \"out(43)\" -> \"christ[2][2][3]\",\r\n   \"out(44)\" -> \"christ[2][3][0]\", \"out(45)\" -> \"christ[2][3][1]\", \"out(46)\" -> \"christ[2][3][2]\", \"out(47)\" -> \"christ[2][3][3]\",\r\n   \"out(48)\" -> \"christ[3][0][0]\", \"out(49)\" -> \"christ[3][0][1]\", \"out(50)\" -> \"christ[3][0][2]\", \"out(51)\" -> \"christ[3][0][3]\",\r\n   \"out(52)\" -> \"christ[3][1][0]\", \"out(53)\" -> \"christ[3][1][1]\", \"out(54)\" -> \"christ[3][1][2]\", \"out(55)\" -> \"christ[3][1][3]\",\r\n   \"out(56)\" -> \"christ[3][2][0]\", \"out(57)\" -> \"christ[3][2][1]\", \"out(58)\" -> \"christ[3][2][2]\", \"out(59)\" -> \"christ[3][2][3]\",\r\n   \"out(60)\" -> \"christ[3][3][0]\", \"out(61)\" -> \"christ[3][3][1]\", \"out(62)\" -> \"christ[3][3][2]\", \"out(63)\" -> \"christ[3][3][3]\"\r\n   }]]];\r\nheader = \"void christoffel(double r, double th, double christ[4][4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nchristoffel = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "output = christoffel;\r\n\r\n(* write to christoffel file *)\r\nSetDirectory[\"C:\\\\Users\\\\WalkerXin\\\\Documents\\\\Scripts\\\\raytransfer\\\\ironline\"];\r\nExport[\"christoffel.cpp\", output, \"Text\"];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 1,
   "value": "### Redshift",
   "languageId": "markdown",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{g}];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"gg\"}]]];\r\nheader = \"void redshift(double r, double th, double ktkp, double &gg)\\n{\\n\";\r\nfooter = \"\\n}\";\r\nred = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "output = red;\r\n\r\n(* write to metric.cpp file *)\r\nSetDirectory[\"C:\\\\Users\\\\WalkerXin\\\\Documents\\\\Scripts\\\\raytransfer\\\\ironline\"];\r\nExport[\"redshift.cpp\", output, \"Text\"]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  }
 ]
}