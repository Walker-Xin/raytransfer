{
 "cells": [
  {
   "kind": 2,
   "value": "Remove[\"Global`*\"]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033240445,
     "endTime": 1719033240526
    },
    "executionOrder": 848,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "f = epsi*M*M*M/r;\r\nA1 = 1 + a13*(M/r)*(M/r)*(M/r);\r\nA2 = 1 + a22*(M/r)*(M/r);\r\nA5 = 1 + a52*(M/r)*(M/r);\r\n\r\n(* chi = Cos[theta]; *)\r\n\r\nB = (r*r + a*a)*A1 - a*a*A2*Sin[theta]*Sin[theta];\r\nSigma = r*r + a*a*Cos[theta]*Cos[theta];\r\n\r\n(* Redefine B and Sigma using chi variable *)\r\nB = (r*r + a*a)*A1 - a*a*A2*(1 - chi*chi);\r\nSigma = r*r + a*a*chi*chi;\r\n\r\nSigmavar = Sigma + f;\r\nDelta = r*r - 2*M*r + a*a;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033240527,
     "endTime": 1719033241368
    },
    "executionOrder": 849,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "epsi = 0;\r\na13 = 0;\r\na22 = 0;\r\na52 = 0;\r\nb1 = 0;\r\nb2 = 0;\r\nc1 = 0;\r\nc2 = 0;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033241368,
     "endTime": 1719033242017
    },
    "executionOrder": 859,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "b1 = defpar;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033242017,
     "endTime": 1719033242092
    },
    "executionOrder": 867,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "gtt = -Sigmavar*(Delta - a*a*A2*A2*(1 - chi*chi))/(B*B);\r\ngrr = Sigmavar/(Delta*A5);\r\ngthth = Sigmavar/(1 - chi*chi); (* Note the extra denominator due to dtheta = dchi/(1 - chi^2)^(1/2) *)\r\ngpp = ((r*r + a*a)*(r*r + a*a)*A1*A1 - a*a*Delta*(1 - chi*chi))*Sigmavar*(1 - chi*chi)/(B*B);\r\ngtp = -a*((r^2 + a^2)*A1*A2 - Delta)*Sigmavar*(1 - chi*chi)/B^2;\r\ngtr = b1*a/(2*r) + b2*a*M/r^2;\r\ngrp = c1*a*(1 - chi*chi)/(2*r) + c2*a*M*(1 - chi*chi)/r^2;\r\n\r\nG = Simplify[{{gtt, gtr, 0, gtp}, {gtr, grr, 0, grp}, {0, 0, gthth, \r\n     0}, {gtp, grp, 0, gpp}}];\r\nG // MatrixForm",
   "languageId": "wolfram",
   "outputs": [
    {
     "items": [
      {
       "data": "<div class=\"wexpr\"><wrow><w></w><wb>(</wb><w>⁠</w><wgrid style=\"grid-template-columns:repeat(4,max-content);\"><w><wrow><w></w><w>-</w><wfrac><w><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>-</w><wrow><w></w><w>2</w><w></w><w>M</w><w></w><w>r</w></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow></w><w><w></w><w><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow></w></w></wfrac></wrow></w><w><wfrac><w><wrow><w></w><w>a</w><w></w><w>defpar</w></wrow></w><w><w></w><w><wrow><w></w><w>2</w><w></w><w>r</w></wrow></w></w></wfrac></w><w><w>0</w></w><w><wfrac><w><wrow><w></w><w>2</w><w></w><w>a</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><w>M</w><w></w><w>r</w></wrow></w><w><w></w><w><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow></w></w></wfrac></w><w><wfrac><w><wrow><w></w><w>a</w><w></w><w>defpar</w></wrow></w><w><w></w><w><wrow><w></w><w>2</w><w></w><w>r</w></wrow></w></w></wfrac></w><w><wfrac><w><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow></w><w><w></w><w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w>-</w><wrow><w></w><w>2</w><w></w><w>M</w><w></w><w>r</w></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow></w></w></wfrac></w><w><w>0</w></w><w><w>0</w></w><w><w>0</w></w><w><w>0</w></w><w><wfrac><w><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow></w><w><w></w><w><wrow><w></w><w>1</w><w>-</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow></w></w></wfrac></w><w><w>0</w></w><w><wfrac><w><wrow><w></w><w>2</w><w></w><w>a</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><w>M</w><w></w><w>r</w></wrow></w><w><w></w><w><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow></w></w></wfrac></w><w><w>0</w></w><w><w>0</w></w><w><wrow><w></w><w>-</w><wfrac><w><wrow><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>4</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>4</w></w></wsup><w>+</w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><w>r</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>2</w><w></w><w>M</w></wrow><w>-</w><wrow><w></w><w>2</w><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>M</w></wrow><w>+</w><w>r</w><w>+</w><wrow><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>r</w></wrow></wrow><wb>)</wb></wrow></wrow></wrow><wb>)</wb></wrow></wrow></w><w><w></w><w><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow></w></w></wfrac></wrow></w></wgrid><w>⁠</w><wb>)</wb></wrow></div>",
       "mime": "x-application/wolfram-language-html"
      },
      {
       "data": "MatrixForm[{{-((a^2*chi^2 - 2*M*r + r^2)/(a^2*chi^2 + r^2)), (a*defpar)/(2*r), 0, (2*a*(-1 + chi^2)*M*r)/(a^2*chi^2 + r^2)}, {(a*defpar)/(2*r), (a^2*chi^2 + r^2)/(a^2 - 2*M*r + r^2), 0, 0}, {0, 0, (a^2*chi^2 + r^2)/(1 - chi^2), 0}, {(2*a*(-1 + chi^2)*M*r)/(a^2*chi^2 + r^2), 0, 0, -(((-1 + chi^2)*(a^4*chi^2 + r^4 + a^2*r*(2*M - 2*chi^2*M + r + chi^2*r)))/(a^2*chi^2 + r^2))}}]",
       "mime": "text/plain"
      }
     ],
     "id": "92cf2fd6-faff-4649-93b1-52178d391821",
     "metadata": {
      "cellLabel": "Out[876]//MatrixForm= ",
      "isBoxData": false
     }
    }
   ],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033242092,
     "endTime": 1719033242885
    },
    "executionOrder": 868,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "dGdr = Simplify[D[G, r]];\r\ndGdchi = Simplify[D[G, chi]];\r\ndGdr2 = Simplify[D[dGdr, r]];\r\ndGdchi2 = Simplify[D[dGdr, chi]];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033242885,
     "endTime": 1719033243218
    },
    "executionOrder": 877,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "Ginv = Simplify[Inverse[G]];\r\n(* Ginv // MatrixForm *)",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033243218,
     "endTime": 1719033243333
    },
    "executionOrder": 881,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "gutt = Ginv[[1]][[1]];\r\ngurr = Ginv[[2]][[2]];\r\nguthth = Ginv[[3]][[3]];\r\ngupp = Ginv[[4]][[4]];\r\ngutr = Ginv[[1]][[2]];\r\ngutp = Ginv[[1]][[4]];\r\ngurp = Ginv[[2]][[4]];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033243334,
     "endTime": 1719033243837
    },
    "executionOrder": 882,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "Christ = ResourceFunction[\"ChristoffelSymbol\"][G, {t, r, chi, phi}, \"Kind\" -> \"Second\"];\r\nChrist = Simplify[Christ];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033243837,
     "endTime": 1719033244319
    },
    "executionOrder": 889,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "omega = (-dGdr[[1]][[4]] + Sqrt[dGdr[[1]][[4]]*dGdr[[1]][[4]] - dGdr[[1]][[1]]*dGdr[[4]][[4]]])/dGdr[[4]][[4]];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033244319,
     "endTime": 1719033244397
    },
    "executionOrder": 891,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "uet = 1/Sqrt[-(G[[1]][[1]] + 2*G[[1]][[4]]*omega + G[[4]][[4]]*omega*omega)];",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033244398,
     "endTime": 1719033244478
    },
    "executionOrder": 892,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "g = 1/(uet*(1 - omega*ktkp))",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [
    {
     "items": [
      {
       "data": "<div class=\"wexpr\"><wfrac><w><wsqrt><w><w>\\</w></w><w></w><w><wrow><w></w><wfrac class=\"script\"><w><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>-</w><wrow><w></w><w>2</w><w></w><w>M</w><w></w><w>r</w></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow></w><w><w></w><w><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow></w></w></wfrac><w>+</w><wfrac class=\"script\"><w><wrow><w></w><w>2</w><w></w><w>a</w><w></w><w>M</w><w></w><w>r</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><wfrac class=\"script\"><w><wrow><w></w><w>2</w><w></w><w>a</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><w>M</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>-</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow></wrow></w><w><w></w><w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>2</w></w></wsup></w></w></wfrac></wrow><w>+</w><wsqrt><w><w>\\</w></w><w></w><w><wrow><w></w><wfrac class=\"script\"><w><wrow><w></w><w>4</w><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>2</w></w></wsup><w></w><wsup><w></w><w>M</w><w><w>2</w></w></wsup><w></w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>-</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>2</w></w></wsup></wrow></w><w><w></w><w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>4</w></w></wsup></w></w></wfrac><w>+</w><wfrac class=\"script\"><w><wrow><w></w><w>4</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><w>M</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>-</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wsup><w></w><w>r</w><w><w>5</w></w></wsup><w>+</w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>r</w><w><w>2</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><w>M</w></wrow><w>+</w><wrow><w></w><w>2</w><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>r</w></wrow></wrow><wb>)</wb></wrow></wrow><w>+</w><wrow><w></w><wsup><w></w><w>a</w><w><w>4</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>M</w></wrow><w>+</w><wrow><w></w><wsup><w></w><w>chi</w><w><w>4</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>M</w></wrow><w>+</w><w>r</w></wrow><wb>)</wb></wrow></wrow></wrow><wb>)</wb></wrow></wrow></wrow><wb>)</wb></wrow></wrow></w><w><w></w><w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>4</w></w></wsup></w></w></wfrac></wrow></w></wsqrt></wrow><wb>)</wb></wrow></wrow></w><w><w></w><w><wrow><w></w><wsup><w></w><w>r</w><w><w>5</w></w></wsup><w>+</w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>r</w><w><w>2</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><w>M</w></wrow><w>+</w><wrow><w></w><w>2</w><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>r</w></wrow></wrow><wb>)</wb></wrow></wrow><w>+</w><wrow><w></w><wsup><w></w><w>a</w><w><w>4</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>M</w></wrow><w>+</w><wrow><w></w><wsup><w></w><w>chi</w><w><w>4</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>M</w></wrow><w>+</w><w>r</w></wrow><wb>)</wb></wrow></wrow></wrow><wb>)</wb></wrow></wrow></wrow></w></w></wfrac><w>+</w><wfrac class=\"script\"><w><wrow><w></w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>3</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>4</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>4</w></w></wsup><w>+</w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><w>r</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>2</w><w></w><w>M</w></wrow><w>-</w><wrow><w></w><w>2</w><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>M</w></wrow><w>+</w><w>r</w><w>+</w><wrow><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>r</w></wrow></wrow><wb>)</wb></wrow></wrow></wrow><wb>)</wb></wrow><w></w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><wfrac class=\"script\"><w><wrow><w></w><w>2</w><w></w><w>a</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><w>M</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>-</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow></wrow></w><w><w></w><w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>2</w></w></wsup></w></w></wfrac></wrow><w>+</w><wsqrt><w><w>\\</w></w><w></w><w><wrow><w></w><wfrac class=\"script\"><w><wrow><w></w><w>4</w><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>2</w></w></wsup><w></w><wsup><w></w><w>M</w><w><w>2</w></w></wsup><w></w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>-</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>2</w></w></wsup></wrow></w><w><w></w><w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>4</w></w></wsup></w></w></wfrac><w>+</w><wfrac class=\"script\"><w><wrow><w></w><w>4</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><w>M</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>-</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wsup><w></w><w>r</w><w><w>5</w></w></wsup><w>+</w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>r</w><w><w>2</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><w>M</w></wrow><w>+</w><wrow><w></w><w>2</w><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>r</w></wrow></wrow><wb>)</wb></wrow></wrow><w>+</w><wrow><w></w><wsup><w></w><w>a</w><w><w>4</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>M</w></wrow><w>+</w><wrow><w></w><wsup><w></w><w>chi</w><w><w>4</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>M</w></wrow><w>+</w><w>r</w></wrow><wb>)</wb></wrow></wrow></wrow><wb>)</wb></wrow></wrow></wrow><wb>)</wb></wrow></wrow></w><w><w></w><w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>4</w></w></wsup></w></w></wfrac></wrow></w></wsqrt></wrow><wb>)</wb></wrow><w><w>2</w></w></wsup></wrow></w><w><w></w><w><wrow><w></w><w>4</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wsup><w></w><w>r</w><w><w>5</w></w></wsup><w>+</w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>r</w><w><w>2</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><w>M</w></wrow><w>+</w><wrow><w></w><w>2</w><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>r</w></wrow></wrow><wb>)</wb></wrow></wrow><w>+</w><wrow><w></w><wsup><w></w><w>a</w><w><w>4</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>M</w></wrow><w>+</w><wrow><w></w><wsup><w></w><w>chi</w><w><w>4</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>M</w></wrow><w>+</w><w>r</w></wrow><wb>)</wb></wrow></wrow></wrow><wb>)</wb></wrow></wrow></wrow><wb>)</wb></wrow><w><w>2</w></w></wsup></wrow></w></w></wfrac></wrow></w></wsqrt></w><w><w></w><w><wrow><w></w><w>1</w><w>+</w><wfrac class=\"script\"><w><wrow><w></w><w>ktkp</w><w></w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>2</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><wfrac class=\"script\"><w><wrow><w></w><w>2</w><w></w><w>a</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><w>M</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>-</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow></wrow></w><w><w></w><w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>2</w></w></wsup></w></w></wfrac></wrow><w>+</w><wsqrt><w><w>\\</w></w><w></w><w><wrow><w></w><wfrac class=\"script\"><w><wrow><w></w><w>4</w><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>2</w></w></wsup><w></w><wsup><w></w><w>M</w><w><w>2</w></w></wsup><w></w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>-</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>2</w></w></wsup></wrow></w><w><w></w><w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>4</w></w></wsup></w></w></wfrac><w>+</w><wfrac class=\"script\"><w><wrow><w></w><w>4</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><w>M</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>-</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wsup><w></w><w>r</w><w><w>5</w></w></wsup><w>+</w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>r</w><w><w>2</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><w>M</w></wrow><w>+</w><wrow><w></w><w>2</w><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>r</w></wrow></wrow><wb>)</wb></wrow></wrow><w>+</w><wrow><w></w><wsup><w></w><w>a</w><w><w>4</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>M</w></wrow><w>+</w><wrow><w></w><wsup><w></w><w>chi</w><w><w>4</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>M</w></wrow><w>+</w><w>r</w></wrow><wb>)</wb></wrow></wrow></wrow><wb>)</wb></wrow></wrow></wrow><wb>)</wb></wrow></wrow></w><w><w></w><w><wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><w>+</w><wsup><w></w><w>r</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w><w>4</w></w></wsup></w></w></wfrac></wrow></w></wsqrt></wrow><wb>)</wb></wrow></wrow></w><w><w></w><w><wrow><w></w><w>2</w><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wsup><w></w><w>r</w><w><w>5</w></w></wsup><w>+</w><wrow><w></w><wsup><w></w><w>a</w><w><w>2</w></w></wsup><w></w><wsup><w></w><w>r</w><w><w>2</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>1</w></wrow><w>+</w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup></wrow><wb>)</wb></wrow><w></w><w>M</w></wrow><w>+</w><wrow><w></w><w>2</w><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>r</w></wrow></wrow><wb>)</wb></wrow></wrow><w>+</w><wrow><w></w><wsup><w></w><w>a</w><w><w>4</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><wsup><w></w><w>chi</w><w><w>2</w></w></wsup><w></w><w>M</w></wrow><w>+</w><wrow><w></w><wsup><w></w><w>chi</w><w><w>4</w></w></wsup><w></w><wrow><w></w><wb>(</wb><wrow><w></w><wrow><w></w><w>-</w><w>M</w></wrow><w>+</w><w>r</w></wrow><wb>)</wb></wrow></wrow></wrow><wb>)</wb></wrow></wrow></wrow><wb>)</wb></wrow></wrow></w></w></wfrac></wrow></w></w></wfrac></div>",
       "mime": "x-application/wolfram-language-html"
      },
      {
       "data": "Sqrt[(a^2*chi^2 - 2*M*r + r^2)/(a^2*chi^2 + r^2) + (2*a*M*r*(a^2*chi^2 + r^2)*((-2*a*(-1 + chi^2)*M*(a^2*chi^2 - r^2))/(a^2*chi^2 + r^2)^2 + Sqrt[(4*a^2*(-1 + chi^2)^2*M^2*(a^2*chi^2 - r^2)^2)/(a^2*chi^2 + r^2)^4 + (4*(-1 + chi^2)*M*(a^2*chi^2 - r^2)*(r^5 + a^2*r^2*((-1 + chi^2)*M + 2*chi^2*r) + a^4*(chi^2*M + chi^4*(-M + r))))/(a^2*chi^2 + r^2)^4]))/(r^5 + a^2*r^2*((-1 + chi^2)*M + 2*chi^2*r) + a^4*(chi^2*M + chi^4*(-M + r))) + ((a^2*chi^2 + r^2)^3*(a^4*chi^2 + r^4 + a^2*r*(2*M - 2*chi^2*M + r + chi^2*r))*((-2*a*(-1 + chi^2)*M*(a^2*chi^2 - r^2))/(a^2*chi^2 + r^2)^2 + Sqrt[(4*a^2*(-1 + chi^2)^2*M^2*(a^2*chi^2 - r^2)^2)/(a^2*chi^2 + r^2)^4 + (4*(-1 + chi^2)*M*(a^2*chi^2 - r^2)*(r^5 + a^2*r^2*((-1 + chi^2)*M + 2*chi^2*r) + a^4*(chi^2*M + chi^4*(-M + r))))/(a^2*chi^2 + r^2)^4])^2)/(4*(-1 + chi^2)*(r^5 + a^2*r^2*((-1 + chi^2)*M + 2*chi^2*r) + a^4*(chi^2*M + chi^4*(-M + r)))^2)]/(1 + (ktkp*(a^2*chi^2 + r^2)^2*((-2*a*(-1 + chi^2)*M*(a^2*chi^2 - r^2))/(a^2*chi^2 + r^2)^2 + Sqrt[(4*a^2*(-1 + chi^2)^2*M^2*(a^2*chi^2 - r^2)^2)/(a^2*chi^2 + r^2)^4 + (4*(-1 + chi^2)*M*(a^2*chi^2 - r^2)*(r^5 + a^2*r^2*((-1 + chi^2)*M + 2*chi^2*r) + a^4*(chi^2*M + chi^4*(-M + r))))/(a^2*chi^2 + r^2)^4]))/(2*(-1 + chi^2)*(r^5 + a^2*r^2*((-1 + chi^2)*M + 2*chi^2*r) + a^4*(chi^2*M + chi^4*(-M + r)))))",
       "mime": "text/plain"
      }
     ],
     "id": "19b2440c-a96c-4276-8b3d-9496b4f97150",
     "metadata": {
      "cellLabel": "Out[893]= ",
      "isBoxData": false
     }
    }
   ],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033244478,
     "endTime": 1719033244680
    },
    "executionOrder": 893,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "se = -(G[[1]][[1]] + G[[1]][[4]]*omega)*uet /. chi -> 0;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033244680,
     "endTime": 1719033244758
    },
    "executionOrder": 894,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "Lzsub = -(G[[1]][[4]] + G[[4]][[4]]*omega)*uet /. chi -> 0;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033244758,
     "endTime": 1719033244837
    },
    "executionOrder": 895,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "(* ::Package:: *)\r\n\r\nBeginPackage[ \"OptimizeExpressionToC`\"]\r\n\r\nOptimizeExpressionToC::usage = \"Generates optimized version of expression in C\";\r\n\r\nExtractTags::usage = \"\";\r\nClearTagText::usage = \"\";\r\nTagExistQ::usage = \"\";\r\nAppendToTag::usage = \"\";\r\n\r\nBegin[ \"Private`\"]\r\n\r\nOptimizeExpressionToC[expr_List] :=\r\n\tModule[ {optimizedExpr, mainExpr, n, m, defs, output},\r\n\t\toptimizedExpr = Experimental`OptimizeExpression[expr];\r\n\t\tIf[ ToString@optimizedExpr[[1, 0]] == \"Block\",\r\n\t\t    {n = Length[optimizedExpr[[1, 1]]];\r\n\t\t     mainExpr = optimizedExpr[[1, 2, n + 1]];},\r\n\t\t    {n = 0;\r\n\t\t     mainExpr = Flatten@{optimizedExpr[[1]]};}\r\n\t\t];\r\n\t\tm = Length[mainExpr];\r\n\t\t\r\n\t\tdefs  = \r\n\t\tTable[ \"double \" <>\r\n\t\t\t       ToString@CForm@optimizedExpr[[1, 2, i, 1]]  <>\r\n\t\t\t       \" = \" <>\r\n\t\t\t       ToString@CForm@optimizedExpr[[1, 2, i, 2]] <>\r\n     \t\t\t       \";\",\r\n    \t\t       {i, 1, n}];\r\n\t\t\r\n\t\toutput = \r\n\r\n\t\t       MapIndexed[ \"out(\"<>StringJoin@Riffle[ToString/@(#2-1),\"\"]<>\") = \" <> ToString@CForm@#1 <>\";\" &,\r\n\t\t\t\t\t mainExpr, {ArrayDepth[mainExpr]}];\r\n\t\t\r\n\t\tStringReplace[Join[defs,output], \"Compile_$\" -> \"t\"]\r\n\t];\r\n\r\nEnd[]\r\n\r\n\r\nExtractTags[string_String] :=\r\n\tModule[ {regex, extractTag},\r\n\t\tregex = RegularExpression[\"\\\\n([^\\\\n]*)// (\\\\[|</?)([^\\\\]\\\\n]*)(\\\\]|>)[^\\\\n]*\\\\n\"];\r\n\t\t\r\n\t\textractTag[bounds_] := Module[{substring, indentation, tagType, tag},\r\n\t\t\t\t\t      substring = StringTake[string, bounds];\r\n\t\t\t\t\t      {{indentation, tagType, tag}} = \r\n\t\t\t\t\t      StringCases[substring, regex -> {\"$1\", \"$2\", \"$3\"}];\r\n\t\t\t\t\t      Association[\"indentation\" -> indentation,\r\n\t\t\t\t\t\t\t  \"tagType\" -> tagType, \r\n\t\t\t\t\t\t\t  \"tag\" -> tag , \"start\" -> bounds[[1]] + 1, \r\n\t\t\t\t\t\t\t  \"end\" -> bounds[[2]]]\r\n\t\t\t\t       ];\r\n\t\t\r\n\t\textractTag[#] & /@ StringPosition[string, regex]\r\n\t];\r\n\r\nTagExistQ[string_String, tag_String] := AnyTrue[ExtractTags[string], #[[\"tag\"]]==tag &];\r\n\r\nClearTagText[string_String, tag_String] :=\r\n\tModule[{tags, startTag, endTag, x},\r\n\t       tags = ExtractTags[string];\r\n\t       startTag = FirstCase[tags, x_ /; x[[\"tag\"]] == tag  && x[[\"tagType\"]] == \"<\"];\r\n\t       endTag = FirstCase[tags, x_ /; x[[\"tag\"]] == tag  && x[[\"tagType\"]] == \"</\"];\r\n\t       \r\n\t       StringTake[string, {1, startTag[[\"end\"]]}] <> \r\n\t\t\t StringTake[string, {endTag[[\"start\"]], StringLength[string]}]\r\n\t]\r\n\r\nAppendToTag[string_String,  tag_String, linesToAppend_List] := \r\n\tModule[{tags, startTag, indent, x},\r\n\t       tags = ExtractTags[string];\r\n\t       startTag = FirstCase[tags, x_ /; x[[\"tag\"]] == tag  && x[[\"tagType\"]] == \"<\"];\r\n\t       indent = startTag[[\"indentation\"]];\r\n\t       \r\n\t       StringTake[string, {1, startTag[[\"end\"]]}] <> \r\n\t\t\t StringRiffle[ linesToAppend, {indent, \"\\n\" <> indent, \"\\n\"}] <>\r\n\t\t\t StringTake[ string, {startTag[[\"end\"]] + 1, StringLength[string]}]\r\n\t];\r\n\r\nAppendToTag[string_String,  tag_String, stringToAppend_String] :=\r\n\tAppendToTag[string, tag, StringSplit[stringToAppend,\"\\n\"]];\r\n\r\n\r\nEndPackage[]",
   "languageId": "wolfram",
   "outputs": [
    {
     "items": [
      {
       "data": "<div class=\"wexpr\"><w>OptimizeExpressionToC`</w></div>",
       "mime": "x-application/wolfram-language-html"
      },
      {
       "data": "\"OptimizeExpressionToC`\"",
       "mime": "text/plain"
      }
     ],
     "id": "35052ca3-223f-4bf5-a058-a70a0d62d449",
     "metadata": {
      "cellLabel": "Out[896]= ",
      "isBoxData": false
     }
    },
    {
     "items": [
      {
       "data": "<div class=\"wexpr\"><w>Private`</w></div>",
       "mime": "x-application/wolfram-language-html"
      },
      {
       "data": "\"Private`\"",
       "mime": "text/plain"
      }
     ],
     "id": "1bccff1c-21b0-4545-b0ad-8ee05491d00b",
     "metadata": {
      "cellLabel": "Out[902]= ",
      "isBoxData": false
     }
    },
    {
     "items": [
      {
       "data": "<div class=\"wexpr\"><w>Private`</w></div>",
       "mime": "x-application/wolfram-language-html"
      },
      {
       "data": "\"Private`\"",
       "mime": "text/plain"
      }
     ],
     "id": "515f34c5-b91f-431e-b619-7e2885dbff56",
     "metadata": {
      "cellLabel": "Out[904]= ",
      "isBoxData": false
     }
    }
   ],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033244838,
     "endTime": 1719033246148
    },
    "executionOrder": 896,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "M = 1;\r\na = spin;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033246148,
     "endTime": 1719033246302
    },
    "executionOrder": 911,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   G[[1]][[1]], G[[1]][[2]], G[[1]][[3]], G[[1]][[4]], \r\n   G[[2]][[1]], G[[2]][[2]], G[[2]][[3]], G[[2]][[4]],\r\n   G[[3]][[1]], G[[3]][[2]], G[[3]][[3]], G[[3]][[4]],\r\n   G[[4]][[1]], G[[4]][[2]], G[[4]][[3]], G[[4]][[4]]\r\n   }];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"g[0][0]\", \"out(1)\" -> \"g[0][1]\", \"out(2)\" -> \"g[0][2]\", \"out(3)\" -> \"g[0][3]\",\r\n   \"out(4)\" -> \"g[1][0]\", \"out(5)\" -> \"g[1][1]\", \"out(6)\" -> \"g[1][2]\", \"out(7)\" -> \"g[1][3]\",\r\n   \"out(8)\" -> \"g[2][0]\", \"out(9)\" -> \"g[2][1]\", \"out(10)\" -> \"g[2][2]\", \"out(11)\" -> \"g[2][3]\",\r\n   \"out(12)\" -> \"g[3][0]\", \"out(13)\" -> \"g[3][1]\", \"out(14)\" -> \"g[3][2]\", \"out(15)\" -> \"g[3][3]\"\r\n   }]]];\r\nheader = \"void metric(double r, double chi, double g[4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nmetric = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033246303,
     "endTime": 1719033246664
    },
    "executionOrder": 913,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   dGdr[[1]][[1]], dGdr[[1]][[2]], dGdr[[1]][[3]], dGdr[[1]][[4]], \r\n   dGdr[[2]][[1]], dGdr[[2]][[2]], dGdr[[2]][[3]], dGdr[[2]][[4]],\r\n   dGdr[[3]][[1]], dGdr[[3]][[2]], dGdr[[3]][[3]], dGdr[[3]][[4]],\r\n   dGdr[[4]][[1]], dGdr[[4]][[2]], dGdr[[4]][[3]], dGdr[[4]][[4]]\r\n   }];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"dg[0][0]\", \"out(1)\" -> \"dg[0][1]\", \"out(2)\" -> \"dg[0][2]\", \"out(3)\" -> \"dg[0][3]\",\r\n   \"out(4)\" -> \"dg[1][0]\", \"out(5)\" -> \"dg[1][1]\", \"out(6)\" -> \"dg[1][2]\", \"out(7)\" -> \"dg[1][3]\",\r\n   \"out(8)\" -> \"dg[2][0]\", \"out(9)\" -> \"dg[2][1]\", \"out(10)\" -> \"dg[2][2]\", \"out(11)\" -> \"dg[2][3]\",\r\n   \"out(12)\" -> \"dg[3][0]\", \"out(13)\" -> \"dg[3][1]\", \"out(14)\" -> \"dg[3][2]\", \"out(15)\" -> \"dg[3][3]\"\r\n   }]]];\r\nheader = \"void metric_rderivatives(double r, double chi, double dg[4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nmetricdr = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033246664,
     "endTime": 1719033247057
    },
    "executionOrder": 918,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   dGdr2[[1]][[1]], dGdr2[[1]][[2]], dGdr2[[1]][[3]], dGdr2[[1]][[4]], \r\n   dGdr2[[2]][[1]], dGdr2[[2]][[2]], dGdr2[[2]][[3]], dGdr2[[2]][[4]],\r\n   dGdr2[[3]][[1]], dGdr2[[3]][[2]], dGdr2[[3]][[3]], dGdr2[[3]][[4]],\r\n   dGdr2[[4]][[1]], dGdr2[[4]][[2]], dGdr2[[4]][[3]], dGdr2[[4]][[4]]\r\n   }];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"dg2[0][0]\", \"out(1)\" -> \"dg2[0][1]\", \"out(2)\" -> \"dg2[0][2]\", \"out(3)\" -> \"dg2[0][3]\",\r\n   \"out(4)\" -> \"dg2[1][0]\", \"out(5)\" -> \"dg2[1][1]\", \"out(6)\" -> \"dg2[1][2]\", \"out(7)\" -> \"dg2[1][3]\",\r\n   \"out(8)\" -> \"dg2[2][0]\", \"out(9)\" -> \"dg2[2][1]\", \"out(10)\" -> \"dg2[2][2]\", \"out(11)\" -> \"dg2[2][3]\",\r\n   \"out(12)\" -> \"dg2[3][0]\", \"out(13)\" -> \"dg2[3][1]\", \"out(14)\" -> \"dg2[3][2]\", \"out(15)\" -> \"dg2[3][3]\"\r\n   }]]];\r\nheader = \"void metric_r2derivatives(double r, double chi, double dg2[4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nmetricdr2 = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033247058,
     "endTime": 1719033247457
    },
    "executionOrder": 923,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   Ginv[[1]][[1]], Ginv[[1]][[2]], Ginv[[1]][[3]], Ginv[[1]][[4]], \r\n   Ginv[[2]][[1]], Ginv[[2]][[2]], Ginv[[2]][[3]], Ginv[[2]][[4]],\r\n   Ginv[[3]][[1]], Ginv[[3]][[2]], Ginv[[3]][[3]], Ginv[[3]][[4]],\r\n   Ginv[[4]][[1]], Ginv[[4]][[2]], Ginv[[4]][[3]], Ginv[[4]][[4]]\r\n   }];\r\nmeet = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"gu[0][0]\", \"out(1)\" -> \"gu[0][1]\", \"out(2)\" -> \"gu[0][2]\", \"out(3)\" -> \"gu[0][3]\",\r\n   \"out(4)\" -> \"gu[1][0]\", \"out(5)\" -> \"gu[1][1]\", \"out(6)\" -> \"gu[1][2]\", \"out(7)\" -> \"gu[1][3]\",\r\n   \"out(8)\" -> \"gu[2][0]\", \"out(9)\" -> \"gu[2][1]\", \"out(10)\" -> \"gu[2][2]\", \"out(11)\" -> \"gu[2][3]\",\r\n   \"out(12)\" -> \"gu[3][0]\", \"out(13)\" -> \"gu[3][1]\", \"out(14)\" -> \"gu[3][2]\", \"out(15)\" -> \"gu[3][3]\"\r\n   }]]];\r\nheader = \"void uppermetric(double r, double chi, double gu[4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nmetricupper = header <> meet <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033247458,
     "endTime": 1719033247852
    },
    "executionOrder": 928,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "output = metric <> \"\\n\\n\" <> metricupper <> \"\\n\\n\" <> metricdr <> \"\\n\\n\" <> metricdr2;\r\n\r\n(* write to metric.cpp file *)\r\nSetDirectory[\"C:\\\\Users\\\\WalkerXin\\\\Documents\\\\Scripts\\\\raytransfer\"];\r\nExport[\"metric.cpp\", output, \"Text\"]",
   "languageId": "wolfram",
   "outputs": [
    {
     "items": [
      {
       "data": "<div class=\"wexpr\"><w>metric.cpp</w></div>",
       "mime": "x-application/wolfram-language-html"
      },
      {
       "data": "\"metric.cpp\"",
       "mime": "text/plain"
      }
     ],
     "id": "35d05579-2715-4a8e-823f-5ac581c2c828",
     "metadata": {
      "cellLabel": "Out[935]= ",
      "isBoxData": false
     }
    }
   ],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033247852,
     "endTime": 1719033248148
    },
    "executionOrder": 933,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{\r\n   Christ[[1]][[1]][[1]], Christ[[1]][[1]][[2]], Christ[[1]][[1]][[3]], Christ[[1]][[1]][[4]],\r\n   Christ[[1]][[2]][[1]], Christ[[1]][[2]][[2]], Christ[[1]][[2]][[3]], Christ[[1]][[2]][[4]],\r\n   Christ[[1]][[3]][[1]], Christ[[1]][[3]][[2]], Christ[[1]][[3]][[3]], Christ[[1]][[3]][[4]],\r\n   Christ[[1]][[4]][[1]], Christ[[1]][[4]][[2]], Christ[[1]][[4]][[3]], Christ[[1]][[4]][[4]],\r\n   Christ[[2]][[1]][[1]], Christ[[2]][[1]][[2]], Christ[[2]][[1]][[3]], Christ[[2]][[1]][[4]],\r\n   Christ[[2]][[2]][[1]], Christ[[2]][[2]][[2]], Christ[[2]][[2]][[3]], Christ[[2]][[2]][[4]],\r\n   Christ[[2]][[3]][[1]], Christ[[2]][[3]][[2]], Christ[[2]][[3]][[3]], Christ[[2]][[3]][[4]],\r\n   Christ[[2]][[4]][[1]], Christ[[2]][[4]][[2]], Christ[[2]][[4]][[3]], Christ[[2]][[4]][[4]],\r\n   Christ[[3]][[1]][[1]], Christ[[3]][[1]][[2]], Christ[[3]][[1]][[3]], Christ[[3]][[1]][[4]],\r\n   Christ[[3]][[2]][[1]], Christ[[3]][[2]][[2]], Christ[[3]][[2]][[3]], Christ[[3]][[2]][[4]],\r\n   Christ[[3]][[3]][[1]], Christ[[3]][[3]][[2]], Christ[[3]][[3]][[3]], Christ[[3]][[3]][[4]],\r\n   Christ[[3]][[4]][[1]], Christ[[3]][[4]][[2]], Christ[[3]][[4]][[3]], Christ[[3]][[4]][[4]],\r\n   Christ[[4]][[1]][[1]], Christ[[4]][[1]][[2]], Christ[[4]][[1]][[3]], Christ[[4]][[1]][[4]],\r\n   Christ[[4]][[2]][[1]], Christ[[4]][[2]][[2]], Christ[[4]][[2]][[3]], Christ[[4]][[2]][[4]],\r\n   Christ[[4]][[3]][[1]], Christ[[4]][[3]][[2]], Christ[[4]][[3]][[3]], Christ[[4]][[3]][[4]],\r\n   Christ[[4]][[4]][[1]], Christ[[4]][[4]][[2]], Christ[[4]][[4]][[3]], Christ[[4]][[4]][[4]]\r\n   }];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"christ[0][0][0]\", \"out(1)\" -> \"christ[0][0][1]\", \"out(2)\" -> \"christ[0][0][2]\", \"out(3)\" -> \"christ[0][0][3]\",\r\n   \"out(4)\" -> \"christ[0][1][0]\", \"out(5)\" -> \"christ[0][1][1]\", \"out(6)\" -> \"christ[0][1][2]\", \"out(7)\" -> \"christ[0][1][3]\",\r\n   \"out(8)\" -> \"christ[0][2][0]\", \"out(9)\" -> \"christ[0][2][1]\", \"out(10)\" -> \"christ[0][2][2]\", \"out(11)\" -> \"christ[0][2][3]\",\r\n   \"out(12)\" -> \"christ[0][3][0]\", \"out(13)\" -> \"christ[0][3][1]\", \"out(14)\" -> \"christ[0][3][2]\", \"out(15)\" -> \"christ[0][3][3]\",\r\n   \"out(16)\" -> \"christ[1][0][0]\", \"out(17)\" -> \"christ[1][0][1]\", \"out(18)\" -> \"christ[1][0][2]\", \"out(19)\" -> \"christ[1][0][3]\",\r\n   \"out(20)\" -> \"christ[1][1][0]\", \"out(21)\" -> \"christ[1][1][1]\", \"out(22)\" -> \"christ[1][1][2]\", \"out(23)\" -> \"christ[1][1][3]\",\r\n   \"out(24)\" -> \"christ[1][2][0]\", \"out(25)\" -> \"christ[1][2][1]\", \"out(26)\" -> \"christ[1][2][2]\", \"out(27)\" -> \"christ[1][2][3]\",\r\n   \"out(28)\" -> \"christ[1][3][0]\", \"out(29)\" -> \"christ[1][3][1]\", \"out(30)\" -> \"christ[1][3][2]\", \"out(31)\" -> \"christ[1][3][3]\",\r\n   \"out(32)\" -> \"christ[2][0][0]\", \"out(33)\" -> \"christ[2][0][1]\", \"out(34)\" -> \"christ[2][0][2]\", \"out(35)\" -> \"christ[2][0][3]\",\r\n   \"out(36)\" -> \"christ[2][1][0]\", \"out(37)\" -> \"christ[2][1][1]\", \"out(38)\" -> \"christ[2][1][2]\", \"out(39)\" -> \"christ[2][1][3]\",\r\n   \"out(40)\" -> \"christ[2][2][0]\", \"out(41)\" -> \"christ[2][2][1]\", \"out(42)\" -> \"christ[2][2][2]\", \"out(43)\" -> \"christ[2][2][3]\",\r\n   \"out(44)\" -> \"christ[2][3][0]\", \"out(45)\" -> \"christ[2][3][1]\", \"out(46)\" -> \"christ[2][3][2]\", \"out(47)\" -> \"christ[2][3][3]\",\r\n   \"out(48)\" -> \"christ[3][0][0]\", \"out(49)\" -> \"christ[3][0][1]\", \"out(50)\" -> \"christ[3][0][2]\", \"out(51)\" -> \"christ[3][0][3]\",\r\n   \"out(52)\" -> \"christ[3][1][0]\", \"out(53)\" -> \"christ[3][1][1]\", \"out(54)\" -> \"christ[3][1][2]\", \"out(55)\" -> \"christ[3][1][3]\",\r\n   \"out(56)\" -> \"christ[3][2][0]\", \"out(57)\" -> \"christ[3][2][1]\", \"out(58)\" -> \"christ[3][2][2]\", \"out(59)\" -> \"christ[3][2][3]\",\r\n   \"out(60)\" -> \"christ[3][3][0]\", \"out(61)\" -> \"christ[3][3][1]\", \"out(62)\" -> \"christ[3][3][2]\", \"out(63)\" -> \"christ[3][3][3]\"\r\n   }]]];\r\nheader = \"void christoffel(double r, double chi, double christ[4][4][4])\\n{\\n\";\r\nfooter = \"\\n}\";\r\nchristoffel = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033248148,
     "endTime": 1719033248585
    },
    "executionOrder": 936,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "output = christoffel;\r\n\r\n(* write to christoffel file *)\r\nExport[\"christoffel.cpp\", output, \"Text\"];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033248585,
     "endTime": 1719033248741
    },
    "executionOrder": 941,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{g}];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"gg\"}]]];\r\nheader = \"void redshift(double r, double chi, double ktkp, double &gg)\\n{\\n\";\r\nfooter = \"\\n}\";\r\nred = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033248741,
     "endTime": 1719033249159
    },
    "executionOrder": 943,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{se}];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"double se\"}]]];\r\nheader = \"double specific_energy(double r)\\n{\\n\";\r\nfooter = \"\\nreturn se;\\n}\";\r\nspecificE = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033249159,
     "endTime": 1719033249570
    },
    "executionOrder": 948,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{Lzsub}];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"double Lz\"}]]];\r\nheader = \"double specific_momentum(double r)\\n{\\n\";\r\nfooter = \"\\nreturn Lz;\\n}\";\r\nspecificL = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033249570,
     "endTime": 1719033249960
    },
    "executionOrder": 953,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "output = red <> \"\\n\\n\" <> specificE <> \"\\n\\n\" <> specificL;\r\n\r\n(* write to metric.cpp file *)\r\nSetDirectory[\"C:\\\\Users\\\\WalkerXin\\\\Documents\\\\Scripts\\\\raytransfer\"];\r\nExport[\"redshift.cpp\", output, \"Text\"]",
   "languageId": "wolfram",
   "outputs": [
    {
     "items": [
      {
       "data": "<div class=\"wexpr\"><w>redshift.cpp</w></div>",
       "mime": "x-application/wolfram-language-html"
      },
      {
       "data": "\"redshift.cpp\"",
       "mime": "text/plain"
      }
     ],
     "id": "4670772e-f16c-4e7b-a3bf-6725ca287875",
     "metadata": {
      "cellLabel": "Out[960]= ",
      "isBoxData": false
     }
    }
   ],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033249960,
     "endTime": 1719033250275
    },
    "executionOrder": 958,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "OptimizeExpressionToC[{d2Veffsub}];\r\nmeat = ToString[Column[StringReplace[%, {\r\n   \"Sqrt\" -> \"sqrt\", \"Power(E,\" -> \"exp(\", \"Power\" -> \"pow\", \"Sin\" -> \"sin\", \"Cos\" -> \"cos\", \"Csc\" -> \"1/sin\", \"Cot\" -> \"1/tan\",\r\n   \"double\" -> \"double\", \";,\" -> \";\\n    \",\r\n   \"out(0)\" -> \"double d2Veff\"\r\n   }]]];\r\nheader = \"double Veff_deri2(double r, double E, double Lz)\\n{\\n\";\r\nfooter = \"\\nreturn d2Veff;\\n}\";\r\nVeffderi2 = header <> meat <> footer;",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033250275,
     "endTime": 1719033250652
    },
    "executionOrder": 961,
    "success": true
   }
  },
  {
   "kind": 2,
   "value": "output = Veffderi2;\r\n\r\n(* write to metric.cpp file *)\r\nSetDirectory[\"C:\\\\Users\\\\WalkerXin\\\\Documents\\\\Scripts\\\\raytransfer\"];\r\nExport[\"effective_potential.cpp\", output, \"Text\"]",
   "languageId": "wolfram",
   "outputs": [
    {
     "items": [
      {
       "data": "<div class=\"wexpr\"><w>effective_potential.cpp</w></div>",
       "mime": "x-application/wolfram-language-html"
      },
      {
       "data": "\"effective_potential.cpp\"",
       "mime": "text/plain"
      }
     ],
     "id": "ca29e7d2-96a2-4289-a43f-bc371b85f2b0",
     "metadata": {
      "cellLabel": "Out[968]= ",
      "isBoxData": false
     }
    }
   ],
   "metadata": {},
   "executionSummary": {
    "timing": {
     "startTime": 1719033250652,
     "endTime": 1719033250967
    },
    "executionOrder": 966,
    "success": true
   }
  }
 ]
}